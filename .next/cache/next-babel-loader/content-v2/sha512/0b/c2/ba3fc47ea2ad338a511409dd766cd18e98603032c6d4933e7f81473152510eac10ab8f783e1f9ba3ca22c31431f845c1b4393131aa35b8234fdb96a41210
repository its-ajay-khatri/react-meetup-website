{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Full_Stack_development_path\\\\ReactJs\\\\NextJs\\\\Meetup-Project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title //meetupdata given below getStaticProps, hence using this function, we can create props of particular component in the same file\n      ,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticPaths() {\n  //mostly to fetch usel(ObjectId=\"63752581654a049737248ac3\")\n  const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //if the database named meetups is not created, then it will create one\n\n  const meetupsCollection = db.collection('meetups'); //connection done\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //({}) means give me all the objects, _id:1 means data will be fetch with old _id field\n\n  client.close();\n  return {\n    fallback: false,\n    //allows you to generate some of your pages for specific meetupId values\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //this function is used to define props of an compoent in the same file of that component, function name must ne same \"getStaticProps\", use to set props for the current component\n  //fetch data for single meetup(single detail page)\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //if the database named meetups is not created, then it will create one\n\n  const meetupsCollection = db.collection('meetups'); //connection done\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    //will finds an single meetup\n    _id: ObjectId(meetupId) //string to object, object is that Object id in that particular entry of mongo db _id: ObjectId(\"63752581654a049737248ac3\")\n\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Full_Stack_development_path/ReactJs/NextJs/Meetup-Project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Head","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport Head from 'next/head';\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails(props) {\r\n    return(\r\n        <>\r\n            <Head>\r\n                <title>{props.meetupData.title}</title>\r\n                <meta \r\n                    name=\"description\"\r\n                    content={props.meetupData.description}\r\n                />\r\n            </Head>\r\n            <MeetupDetail \r\n                image={props.meetupData.image}\r\n                title={props.meetupData.title}                //meetupdata given below getStaticProps, hence using this function, we can create props of particular component in the same file\r\n                address={props.meetupData.address}\r\n                description={props.meetupData.description}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport async function getStaticPaths(){\r\n\r\n    //mostly to fetch usel(ObjectId=\"63752581654a049737248ac3\")\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\r\n        \r\n    const db = client.db();      //if the database named meetups is not created, then it will create one\r\n\r\n    const meetupsCollection = db.collection('meetups');       //connection done\r\n\r\n    const meetups = await meetupsCollection.find({}, {_id: 1}).toArray();        //({}) means give me all the objects, _id:1 means data will be fetch with old _id field\r\n\r\n    client.close();\r\n\r\n    return{\r\n        fallback: false,              //allows you to generate some of your pages for specific meetupId values\r\n        paths: meetups.map(meetup =>({ \r\n            params: { meetupId: meetup._id.toString() },\r\n     })),\r\n    }\r\n}\r\n\r\n\r\nexport async function getStaticProps(context){          //this function is used to define props of an compoent in the same file of that component, function name must ne same \"getStaticProps\", use to set props for the current component\r\n\r\n    //fetch data for single meetup(single detail page)\r\n    const meetupId = context.params.meetupId;\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\r\n        \r\n    const db = client.db();      //if the database named meetups is not created, then it will create one\r\n\r\n    const meetupsCollection = db.collection('meetups');       //connection done\r\n\r\n    const selectedMeetup = await meetupsCollection.findOne({                 //will finds an single meetup\r\n        _id: ObjectId(meetupId),                   //string to object, object is that Object id in that particular entry of mongo db _id: ObjectId(\"63752581654a049737248ac3\")\r\n    });         \r\n    \r\n    client.close();\r\n\r\n    return{\r\n        props: {\r\n            meetupData: {\r\n                id: selectedMeetup._id.toString(),\r\n                title: selectedMeetup.title,\r\n                address: selectedMeetup.address,\r\n                image: selectedMeetup.image,\r\n                description: selectedMeetup.description\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}