{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Full_Stack_development_path\\\\ReactJs\\\\NextJs\\\\Meetup-Project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      title: props.meetupData.title //meetupdata given below getStaticProps, hence using this function, we can create props of particular component in the same file\n      ,\n      image: props.meetupData.image,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //if the database named meetups is not created, then it will create one\n\n  const meetupsCollection = db.collection('meetups'); //connection done\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //({}) means give me all the objects, _id:1 means data will be fetch with old _id field\n\n  client.close();\n  return {\n    fallback: false,\n    //allows you to generate some of your pages for specific meetupId values\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch data for single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //if the database named meetups is not created, then it will create one\n\n  const meetupsCollection = db.collection('meetups'); //connection done\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    //will finds an signle meetup\n    _id: ObjectId(meetupId) //string to object\n\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Full_Stack_development_path/ReactJs/NextJs/Meetup-Project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI;AAAA,2BACI,QAAC,YAAD;AACA,MAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADxB,CAC8C;AAD9C;AAEA,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFxB;AAGA,MAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH1B;AAIA,MAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ9B;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAUH;;AAGD,OAAO,eAAeC,cAAf,GAA+B;AAElC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,4GAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAJkC,CAIL;;AAE7B,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CANkC,CAMwB;;AAE1D,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAAtB,CARkC,CAQ2C;;AAE7ER,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAM;AACFC,IAAAA,QAAQ,EAAE,KADR;AAC4B;AAC9BC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAI;AACzBC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADiB,KAAJ,CAAlB;AAFL,GAAN;AAMH;AAGD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAEzC;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,4GAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAPyC,CAOZ;;AAE7B,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CATyC,CASiB;;AAE1D,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAkB;AACrEb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD,CADsC,CACR;;AADQ,GAA1B,CAA7B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAM;AACFhB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACR2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADI;AAERrB,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAFd;AAGRE,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHhB;AAIRD,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAJd;AAKRE,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALpB;AADT;AADL,GAAN;AAWH;AAED,eAAeN,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\n\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails(props) {\r\n    return(\r\n        <>\r\n            <MeetupDetail \r\n            title={props.meetupData.title}                //meetupdata given below getStaticProps, hence using this function, we can create props of particular component in the same file\r\n            image={props.meetupData.image}\r\n            address={props.meetupData.address}\r\n            description={props.meetupData.description}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport async function getStaticPaths(){\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\r\n        \r\n    const db = client.db();      //if the database named meetups is not created, then it will create one\r\n\r\n    const meetupsCollection = db.collection('meetups');       //connection done\r\n\r\n    const meetups = await meetupsCollection.find({}, {_id: 1}).toArray();        //({}) means give me all the objects, _id:1 means data will be fetch with old _id field\r\n\r\n    client.close();\r\n\r\n    return{\r\n        fallback: false,              //allows you to generate some of your pages for specific meetupId values\r\n        paths: meetups.map(meetup =>({ \r\n            params: { meetupId: meetup._id.toString() },\r\n     })),\r\n    }\r\n}\r\n\r\n\r\nexport async function getStaticProps(context){\r\n\r\n    //fetch data for single meetup\r\n    const meetupId = context.params.meetupId;\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://mongoadmin:kKXJKjZywgAUGDgL@cluster0.rs3k4vd.mongodb.net/meetups?retryWrites=true&w=majority');\r\n        \r\n    const db = client.db();      //if the database named meetups is not created, then it will create one\r\n\r\n    const meetupsCollection = db.collection('meetups');       //connection done\r\n\r\n    const selectedMeetup = await meetupsCollection.findOne({                 //will finds an signle meetup\r\n        _id: ObjectId(meetupId),                   //string to object\r\n    });         \r\n    \r\n    client.close();\r\n\r\n    return{\r\n        props: {\r\n            meetupData: {\r\n                id: selectedMeetup._id.toString(),\r\n                title: selectedMeetup.title,\r\n                address: selectedMeetup.address,\r\n                image: selectedMeetup.image,\r\n                description: selectedMeetup.description\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}